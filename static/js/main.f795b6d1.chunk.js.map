{"version":3,"sources":["logo.svg","Components/Weather/FiveDay/FiveDay.js","Components/Weather/data.js","Components/Weather/Form.js","Components/Weather/List.js","Components/Weather/Weather.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FiveDay","listData","rowOne","slice","rowTwo","rowThree","rowFour","rowFive","fiveDayTempsOne","fiveDayTempsTwo","fiveDayTempsThree","fiveDayTempsFour","fiveDayTempsFive","map","obj","console","log","weather","icon","className","src","alt","Math","round","main","temp","dt_txt","days","d","Date","n","getDay","class","cityData","savedZip","Form","handleSubmit","zipCode","setZipCode","onSubmit","htmlFor","type","value","onChange","event","target","id","List","onClick","listOfZips","item","Weather","useState","setAllData","cityName","setCityName","setListData","currentWeather","setCurrentWeather","iconInfo","setIconInfo","feelsLike","setFeelsLike","tempMin","setTempMin","tempMax","setTempMax","humidity","setHumidity","zips","updateZips","input","setInput","makeApiCall","a","weatherUrl","fetch","res","json","data","city","name","list","temp_min","temp_max","useEffect","preventDefault","newZip","innerText","text","toString","About","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f795b6d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\r\n\r\nfunction FiveDay({listData}) {\r\n\r\n\r\n\r\nconst rowOne=listData.slice(0,8)\r\nconst rowTwo=listData.slice(8,16)\r\nconst rowThree=listData.slice(16,24)\r\nconst rowFour=listData.slice(24,32)\r\nconst rowFive=listData.slice(32,40)\r\n\r\n  \r\n  \r\nlet fiveDayTempsOne = <h1>Loading</h1>\r\nlet fiveDayTempsTwo = <h1>Loading</h1>\r\nlet fiveDayTempsThree = <h1>Loading</h1>\r\nlet fiveDayTempsFour = <h1>Loading</h1>\r\nlet fiveDayTempsFive = <h1>Loading</h1>\r\n\r\n// const newCall = async (icon) => {\r\n//   const iconUrl =   `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n//   const res = await fetch(iconUrl)\r\n//   const json = await res.json()\r\n//   console.log('json',json)\r\n// }\r\n\r\n\r\nif(listData[0]) {\r\n  fiveDayTempsOne = rowOne.map(obj => {\r\n    console.log(obj.weather[0].icon)\r\n\r\n\r\n  return<ul className='fiveDayRows'>\r\n        <img src={  `https://openweathermap.org/img/wn/${obj.weather[0].icon}@2x.png`\r\n} alt=\"boohoo\" className=\"smallImages\"/>\r\n        \r\n        <li>{Math.round(obj.main.temp)}°</li>\r\n        <li>{obj.dt_txt.slice(11,16)}</li>\r\n        </ul>\r\n  \r\n\r\n  })\r\n}\r\nif(listData[0]) {\r\n  fiveDayTempsTwo = rowTwo.map(obj => {\r\n    return<ul className='fiveDayRows'>\r\n    <img src={  `https://openweathermap.org/img/wn/${obj.weather[0].icon}@2x.png`\r\n} alt=\"boohoo\" className=\"smallImages\"/>\r\n<li>{Math.round(obj.main.temp)}°</li>\r\n    <li>{obj.dt_txt.slice(11,16)}</li>\r\n    </ul>\r\n\r\n\r\n})\r\n}\r\nif(listData[0]) {\r\n  fiveDayTempsThree = rowThree.map(obj => {\r\n    return<ul className='fiveDayRows'>\r\n    <img src={  `https://openweathermap.org/img/wn/${obj.weather[0].icon}@2x.png`\r\n} alt=\"boohoo\" className=\"smallImages\"/>\r\n<li>{Math.round(obj.main.temp)}°</li>\r\n    <li>{obj.dt_txt.slice(11,16)}</li>\r\n    </ul>\r\n\r\n\r\n})\r\n}\r\nif(listData[0]) {\r\n  fiveDayTempsFour = rowFour.map(obj => {\r\n    return<ul className='fiveDayRows'>\r\n    <img src={  `https://openweathermap.org/img/wn/${obj.weather[0].icon}@2x.png`\r\n} alt=\"boohoo\" className=\"smallImages\"/>\r\n<li>{Math.round(obj.main.temp)}°</li>\r\n    <li>{obj.dt_txt.slice(11,16)}</li>\r\n    </ul>\r\n\r\n\r\n})\r\n}\r\nif(listData[0]) {\r\n  fiveDayTempsFive = rowFive.map(obj => {\r\n    return<ul className='fiveDayRows'>\r\n    <img src={  `https://openweathermap.org/img/wn/${obj.weather[0].icon}@2x.png`\r\n} alt=\"boohoo\" className=\"smallImages\"/>\r\n<li>{Math.round(obj.main.temp)}°</li>\r\n    <li>{obj.dt_txt.slice(11,16)}</li>\r\n    </ul>\r\n\r\n\r\n})\r\n}\r\nlet days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat','Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat','Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\nlet d = new Date();\r\nlet n = days[d.getDay()]\r\n    \r\n  return (\r\n    <div className=\"FiveDay\">\r\n        <h2>Five Day Forecast</h2>\r\n  <ul class=\"row\"><span className='date'>{n}</span>{fiveDayTempsOne}</ul>\r\n  <ul class=\"row\"><span className='date'>{days[d.getDay()+1]}</span>{fiveDayTempsTwo}</ul>\r\n          <ul class=\"row\"><span className='date'>{days[d.getDay()+2]}</span>{fiveDayTempsThree}</ul>\r\n          <ul class=\"row\"><span className='date'>{days[d.getDay()+3]}</span>{fiveDayTempsFour}</ul>\r\n          <ul class=\"row\"><span className='date'>{days[d.getDay()+4]}</span>{fiveDayTempsFive}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FiveDay;\r\n","const cityData = [\r\n    {savedZip: 75062},\r\n    {savedZip: 75070}\r\n];\r\n\r\nexport default cityData;","import React, { useState } from 'react'\r\nimport cityData from './data'\r\n\r\n\r\nfunction Form({handleSubmit,zipCode, setZipCode}) {\r\n\r\n\r\n\r\n    const handleZipChange = (event) => {\r\n        setZipCode(event.target.value)\r\n\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor='zip'></label>\r\n            <input type='text' value={zipCode} onChange={handleZipChange} id='zip'/>\r\n            <input type='submit' value='Add Zip'/>\r\n        </form>\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nfunction List ({cityData, onClick}){\r\n    console.log('cityDAta',cityData)\r\n    const listOfZips = cityData.map(item => {\r\n        console.log(item.savedZip)\r\n    return(<li onClick={onClick}>{item.savedZip}</li>)\r\n    })\r\n\r\n    return(\r\n        <ul className='zipList'>\r\n            <li>{listOfZips}</li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default List;","import React, { useState, useEffect} from 'react';\r\nimport FiveDay from './FiveDay/FiveDay'\r\nimport Form from './Form'\r\nimport List from './List'\r\nimport cityData from './data'\r\n\r\nfunction Weather() {\r\n\r\n    const [allData, setAllData] = useState()\r\n    const [cityName, setCityName] = useState()\r\n    const [listData, setListData] = useState([ ])\r\n    const [currentWeather, setCurrentWeather] = useState()\r\n    const [iconInfo, setIconInfo] = useState('')\r\n    const [feelsLike, setFeelsLike] = useState('')\r\n    const [tempMin, setTempMin] = useState('')\r\n    const [tempMax, setTempMax] = useState('')\r\n    const [humidity, setHumidity] = useState('')\r\n\r\n    const [zipCode, setZipCode] = useState('')\r\n    const [zips, updateZips] = useState(cityData)\r\n    const [input, setInput] = useState('10001')\r\n\r\n\r\n    const makeApiCall = async (input) => {\r\n        const weatherUrl = `http://api.openweathermap.org/data/2.5/forecast?zip=${input},us&units=imperial&appid=0ab144033f62031c07bcf88c9cb4219c`\r\n        const res = await fetch(weatherUrl)\r\n        const json = await res.json()\r\n        let data=json\r\n        if (data===json) {\r\n        setAllData(data)\r\n        setCityName(data.city.name)\r\n        setListData(data.list)\r\n        setCurrentWeather(data.list[0].main.temp)\r\n        setIconInfo(data.list[0].weather[0].icon)\r\n        setFeelsLike(data.list[0].main.temp_min)\r\n        setTempMin(data.list[0].main.temp_min)\r\n        setTempMax(data.list[0].main.temp_max)\r\n        setHumidity(data.list[0].main.humidity)\r\n    }\r\n\r\n\r\n    }\r\n\r\n\r\n    useEffect ( () => {\r\n        makeApiCall(input)\r\n\r\n     },[input])\r\n\r\n     const handleSubmit = event => {\r\n        event.preventDefault();\r\n        console.log('you clicked submit')\r\n        updateZips(cityData)\r\n\r\n        const newZip = {\r\n                savedZip: zipCode\r\n            };\r\n\r\n            console.log('newZip',newZip)\r\n\r\n    \r\n            updateZips([newZip, ...zips])\r\n\r\n            setInput(zipCode)\r\n            \r\n\r\n\r\n    \r\n        }\r\n\r\nconst handleOnClick = event => {\r\n    console.log('onclick',event.target.innerText)\r\n    const text = toString(event.target)\r\n    console.log('text', text)\r\n    setInput(event.target.innerText)\r\n    \r\n}\r\n        \r\n\r\n\r\n    \r\n\r\n\r\n    \r\n  return (\r\n    <div className=\"Weather\">\r\n        <div class='today'>\r\n            <h1 className='city'>{cityName}</h1>\r\n            <img className='largeImage'src={`https://openweathermap.org/img/wn/${iconInfo}@2x.png`} />\r\n            <h1 className='temp'>{currentWeather}°F</h1>\r\n            <h3 className='feelsLike'>Feels Like: {feelsLike}</h3>\r\n            <ul className='minmax'>\r\n                <li>Min: {tempMin}°F</li>\r\n                <li>Max: {tempMax}°F</li>\r\n            </ul>\r\n  <h2 className='humidity'>Humidity: {humidity}</h2>\r\n        </div>\r\n        <div className=\"formList\">\r\n        <Form handleSubmit={handleSubmit}  zipCode={zipCode} setZipCode={setZipCode}/> \r\n        <List handleSubmit={handleSubmit} cityData={zips} onClick={handleOnClick}/>\r\n        </div>\r\n        <FiveDay listData={listData}/>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react'\r\n\r\nfunction About (){\r\n    return(\r\n        <div className='aboutSection'>\r\n    <h1>About Us</h1>\r\n    <p>Welcome to our weather app. <br/>The weather app that is designed around you, <br/>the user.</p>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default About;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Weather from './Components/Weather/Weather';\nimport { Route, Link } from \"react-router-dom\";\nimport About from './Components/About'\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Link to='/'>\n        <h2 className='Logo'>The<br/> Weather<br/> App</h2>\n      </Link>\n      <Route exact path='/' component={Weather}/>\n      <Link className='aboutLink' to='/About'>\n      <footer><h1>About</h1></footer>\n        </Link>\n\n      \n      <Route exact path='/About' component={About}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <Router>\n      <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}